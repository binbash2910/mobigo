package com.binbash.mobigo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PeopleAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPeopleAllPropertiesEquals(People expected, People actual) {
        assertPeopleAutoGeneratedPropertiesEquals(expected, actual);
        assertPeopleAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPeopleAllUpdatablePropertiesEquals(People expected, People actual) {
        assertPeopleUpdatableFieldsEquals(expected, actual);
        assertPeopleUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPeopleAutoGeneratedPropertiesEquals(People expected, People actual) {
        assertThat(actual)
            .as("Verify People auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPeopleUpdatableFieldsEquals(People expected, People actual) {
        assertThat(actual)
            .as("Verify People relevant properties")
            .satisfies(a -> assertThat(a.getNom()).as("check nom").isEqualTo(expected.getNom()))
            .satisfies(a -> assertThat(a.getPrenom()).as("check prenom").isEqualTo(expected.getPrenom()))
            .satisfies(a -> assertThat(a.getTelephone()).as("check telephone").isEqualTo(expected.getTelephone()))
            .satisfies(a -> assertThat(a.getCni()).as("check cni").isEqualTo(expected.getCni()))
            .satisfies(a -> assertThat(a.getPhoto()).as("check photo").isEqualTo(expected.getPhoto()))
            .satisfies(a -> assertThat(a.getActif()).as("check actif").isEqualTo(expected.getActif()))
            .satisfies(a -> assertThat(a.getDateNaissance()).as("check dateNaissance").isEqualTo(expected.getDateNaissance()))
            .satisfies(a -> assertThat(a.getMusique()).as("check musique").isEqualTo(expected.getMusique()))
            .satisfies(a -> assertThat(a.getDiscussion()).as("check discussion").isEqualTo(expected.getDiscussion()))
            .satisfies(a -> assertThat(a.getCigarette()).as("check cigarette").isEqualTo(expected.getCigarette()))
            .satisfies(a -> assertThat(a.getAlcool()).as("check alcool").isEqualTo(expected.getAlcool()))
            .satisfies(a -> assertThat(a.getAnimaux()).as("check animaux").isEqualTo(expected.getAnimaux()))
            .satisfies(a -> assertThat(a.getConducteur()).as("check conducteur").isEqualTo(expected.getConducteur()))
            .satisfies(a -> assertThat(a.getPassager()).as("check passager").isEqualTo(expected.getPassager()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPeopleUpdatableRelationshipsEquals(People expected, People actual) {
        // empty method
    }
}
