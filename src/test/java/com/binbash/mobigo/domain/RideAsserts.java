package com.binbash.mobigo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class RideAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRideAllPropertiesEquals(Ride expected, Ride actual) {
        assertRideAutoGeneratedPropertiesEquals(expected, actual);
        assertRideAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRideAllUpdatablePropertiesEquals(Ride expected, Ride actual) {
        assertRideUpdatableFieldsEquals(expected, actual);
        assertRideUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRideAutoGeneratedPropertiesEquals(Ride expected, Ride actual) {
        assertThat(actual)
            .as("Verify Ride auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRideUpdatableFieldsEquals(Ride expected, Ride actual) {
        assertThat(actual)
            .as("Verify Ride relevant properties")
            .satisfies(a -> assertThat(a.getVilleDepart()).as("check villeDepart").isEqualTo(expected.getVilleDepart()))
            .satisfies(a -> assertThat(a.getVilleArrivee()).as("check villeArrivee").isEqualTo(expected.getVilleArrivee()))
            .satisfies(a -> assertThat(a.getDateDepart()).as("check dateDepart").isEqualTo(expected.getDateDepart()))
            .satisfies(a -> assertThat(a.getDateArrivee()).as("check dateArrivee").isEqualTo(expected.getDateArrivee()))
            .satisfies(a -> assertThat(a.getHeureDepart()).as("check heureDepart").isEqualTo(expected.getHeureDepart()))
            .satisfies(a -> assertThat(a.getHeureArrivee()).as("check heureArrivee").isEqualTo(expected.getHeureArrivee()))
            .satisfies(a -> assertThat(a.getMinuteDepart()).as("check minuteDepart").isEqualTo(expected.getMinuteDepart()))
            .satisfies(a -> assertThat(a.getMinuteArrivee()).as("check minuteArrivee").isEqualTo(expected.getMinuteArrivee()))
            .satisfies(a -> assertThat(a.getPrixParPlace()).as("check prixParPlace").isEqualTo(expected.getPrixParPlace()))
            .satisfies(a ->
                assertThat(a.getNbrePlaceDisponible()).as("check nbrePlaceDisponible").isEqualTo(expected.getNbrePlaceDisponible())
            )
            .satisfies(a -> assertThat(a.getStatut()).as("check statut").isEqualTo(expected.getStatut()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRideUpdatableRelationshipsEquals(Ride expected, Ride actual) {
        assertThat(actual)
            .as("Verify Ride relationships")
            .satisfies(a -> assertThat(a.getVehicule()).as("check vehicule").isEqualTo(expected.getVehicule()));
    }
}
