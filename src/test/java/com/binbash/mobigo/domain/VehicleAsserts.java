package com.binbash.mobigo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VehicleAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVehicleAllPropertiesEquals(Vehicle expected, Vehicle actual) {
        assertVehicleAutoGeneratedPropertiesEquals(expected, actual);
        assertVehicleAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVehicleAllUpdatablePropertiesEquals(Vehicle expected, Vehicle actual) {
        assertVehicleUpdatableFieldsEquals(expected, actual);
        assertVehicleUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVehicleAutoGeneratedPropertiesEquals(Vehicle expected, Vehicle actual) {
        assertThat(actual)
            .as("Verify Vehicle auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVehicleUpdatableFieldsEquals(Vehicle expected, Vehicle actual) {
        assertThat(actual)
            .as("Verify Vehicle relevant properties")
            .satisfies(a -> assertThat(a.getMarque()).as("check marque").isEqualTo(expected.getMarque()))
            .satisfies(a -> assertThat(a.getModele()).as("check modele").isEqualTo(expected.getModele()))
            .satisfies(a -> assertThat(a.getAnnee()).as("check annee").isEqualTo(expected.getAnnee()))
            .satisfies(a -> assertThat(a.getCarteGrise()).as("check carteGrise").isEqualTo(expected.getCarteGrise()))
            .satisfies(a -> assertThat(a.getImmatriculation()).as("check immatriculation").isEqualTo(expected.getImmatriculation()))
            .satisfies(a -> assertThat(a.getNbPlaces()).as("check nbPlaces").isEqualTo(expected.getNbPlaces()))
            .satisfies(a -> assertThat(a.getCouleur()).as("check couleur").isEqualTo(expected.getCouleur()))
            .satisfies(a -> assertThat(a.getPhoto()).as("check photo").isEqualTo(expected.getPhoto()))
            .satisfies(a -> assertThat(a.getActif()).as("check actif").isEqualTo(expected.getActif()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVehicleUpdatableRelationshipsEquals(Vehicle expected, Vehicle actual) {
        assertThat(actual)
            .as("Verify Vehicle relationships")
            .satisfies(a -> assertThat(a.getProprietaire()).as("check proprietaire").isEqualTo(expected.getProprietaire()));
    }
}
